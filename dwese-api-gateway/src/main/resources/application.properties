# Nombre de la aplicación dentro del ecosistema Spring Boot
spring.application.name=dwese-api-gateway


# Configura el nivel de logs para depuración en el API Gateway
# Muestra información detallada sobre cómo se procesan las rutas y peticiones
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.web=DEBUG


# Puerto en el que se ejecutará el API Gateway
server.port=8080


# URLs internas de los microservicios (Docker Compose usa los nombres de los servicios como host)
microservice.auth.url=http://auth-service:8080
microservice.api.url=http://ticket-logger-api:8080


# Configuración de rutas en API Gateway


## RUTA: Servicio de autenticación (auth-service)
spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=${microservice.auth.url}
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/auth/**


## RUTA: Servicio principal de la aplicación (ticket-logger-api)
spring.cloud.gateway.routes[1].id=ticket-logger-api
spring.cloud.gateway.routes[1].uri=${microservice.api.url}
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/ticket-logger/**


# Clave secreta para generar el token
jwt.secret=${JWT_SECRET}


# Ruta al archivo del keystore (leída desde la variable de entorno JWT_KEYSTORE_PATH)
jwt.keystore.path=${JWT_KEYSTORE_PATH}


# Contraseña del keystore (leída desde la variable de entorno JWT_KEYSTORE_PASSWORD)
jwt.keystore.password=${JWT_KEYSTORE_PASSWORD}


# Alias del par de claves dentro del keystore (leído desde la variable de entorno JWT_KEYSTORE_ALIAS)
jwt.keystore.alias=${JWT_KEYSTORE_ALIAS}
